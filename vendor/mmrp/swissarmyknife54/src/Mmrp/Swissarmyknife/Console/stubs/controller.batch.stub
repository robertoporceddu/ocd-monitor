<?php

namespace DummyNamespace;

use Illuminate\Validation\Rule;
use Mmrp\Swissarmyknife\Controller\BaseCrudController;
use Mmrp\Swissarmyknife\Lib\BatchImport\BatchImportTrait;

use Illuminate\Http\Request;
use DummyRootNamespaceHttp\Controllers\Controller;

class DummyClass extends BaseCrudController
{
    use BatchImportTrait;

    protected $action = NULL;
    protected $resource = NULL;
    protected $views_folder = NULL;
    protected $title = NULL;
    protected $model = NULL;
    protected $batch_import_model = NULL;
    protected $batch_import_log = NULL;
    protected $validation_rules = NULL;
    protected $breadcrumbs = NULL;

    public function __construct(Request $request)
    {
        $this->action = '';
        $this->resource = '';
        $this->views_folder = 'crud';
        $this->model = '';
        $this->validation_rules = [];

        $this->breadcrumbs = [];
        $this->title = '';

        $this->fields_types = [];

        $this->batch_import_model = '';
        $this->batch_import_log = '';

        parent::__construct($request);

        $this->initBatchImportTrait();
    }

   /**
    * Prepare @index environment
    * @param Request $request
    */
   protected function prepareIndex(Request $request)
   {
        $this->title = '';
        $this->breadcrumbs = [];
   }

   /**
    * Prepare @async environment
    * @param Request $request
    */
   protected function prepareAsync(Request $request)
   {
       return parent::prepareAsync($request);
   }

   /**
    * Prepare @get environment
    * @param Request $request
    * @param $id
    */
   protected function prepareGet(Request $request, $id)
   {
        $this->title = '';
        $this->breadcrumbs = [];
   }

   /**
    * Prepare @insert environment
    * @param Request $request
    */
   protected function prepareInsert(Request $request)
   {
        $this->title = '';
        $this->breadcrumbs = [];
   }

   /**
    * Prepare @edit environment
    * @param Request $request
    * @param $id
    */
   protected function prepareEdit(Request $request, $id)
   {
        $this->title = '';
        $this->breadcrumbs = [];
   }

   /**
    * Execute your code before $this->model->delete()
    * @param Request $request
    * @param $id
    */
   protected function beforeDelete(Request $request, $id)
   {

   }

   /**
    * Executed after $this->model->delete()
    * @param Request $request
    * @param $id
    */
   protected function afterDelete(Request $request, $id)
   {

   }

   /**
    * Executed before $this->model->destroy()
    * @param Request $request
    * @param $id
    */
   protected function beforeDestroy(Request $request, $id)
   {

   }

   /**
    * Executed before $this->model->destroy()
    * @param Request $request
    * @param $id
    */
   protected function afterDestroy(Request $request, $id)
   {

   }

   /**
    * Executed before $this->model->restore()
    * @param Request $request
    * @param $id
    */
   protected function beforeRestore(Request $request, $id)
   {

   }

   /**
    * Eexecuted before $this->model->restore()
    * @param Request $request
    * @param $id
    */
   protected function afterRestore(Request $request, $id)
   {

   }

   /**
    * Prepare @trash environment
    * @param Request $request
    */
   protected function prepareTrash(Request $request)
   {
        $this->title = '';
        $this->breadcrumbs = [];
   }

   /**
    * Prepare @imports environment
    * @param Request $request
    */
   protected function prepareImports(Request $request)
   {

   }

   /**
    * Prepare @content environment
    * @param Request $request
    */
   protected function prepareContent(Request $request)
   {

   }

   /**
    * Prepare @matching environment
    * @param Request $request
    */
   protected function  prepareMatching(Request $request)
   {

   }

   /**
    * Prepare @mapping environment
    * @param Request $request
    */
   protected function  prepareMapping(Request $request)
   {

   }

   /**
    * Prepare @completed environment
    * @param Request $request
    */
   protected function prepareCompleted(Request $request)
   {

   }

   /**
    * Prepare @formUpload environment
    * @param Request $request
    * @param null $file_id
    */
   protected function prepareFormUpload(Request $request, $file_id = NULL)
   {

   }

   /**
    * Prepare @prepareUpload environment
    * @param Request $request
    */
   protected function prepareUpload(Request $request)
   {

   }
}

